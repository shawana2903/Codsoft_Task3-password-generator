import random
import string
import re

def generate_password(length, include_upper=True, include_lower=True, include_digits=True, include_special=True, exclude_chars="", include_chars=""):
    # Define possible characters based on user preferences
    characters = ""
    if include_upper:
        characters += string.ascii_uppercase
    if include_lower:
        characters += string.ascii_lowercase
    if include_digits:
        characters += string.digits
    if include_special:
        characters += string.punctuation
    
    # Remove any excluded characters
    characters = ''.join(c for c in characters if c not in exclude_chars)
    
    # Add user-specified characters to the pool
    characters += include_chars
    
    # Ensure the password length is valid
    if length < 4 or not characters:
        return "Password length should be at least 4 characters and characters set should not be empty."
    
    # Generate a random password
    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def evaluate_password_strength(password):
    # Check for different character types
    has_upper = bool(re.search(r'[A-Z]', password))
    has_lower = bool(re.search(r'[a-z]', password))
    has_digit = bool(re.search(r'[0-9]', password))
    has_special = bool(re.search(r'[!@#$%^&*(),.?":{}|<>]', password))
    
    # Evaluate strength
    if len(password) >= 12 and has_upper and has_lower and has_digit and has_special:
        return "strong"
    elif len(password) >= 8 and (has_upper or has_lower) and (has_digit or has_special):
        return "medium"
    else:
        return "weak"

def password_generator():
    print("Password Generator")
    
    # Prompt the user for the desired length of the password
    try:
        length = int(input("Enter the desired length of the password: "))
        if length < 4:
            print("Password length should be at least 4 characters.")
            return
    except ValueError:
        print("Invalid input! Please enter a number.")
        return
    
    # Ask user for character set preferences
    include_upper = input("Include uppercase letters? (y/n): ").lower() == 'y'
    include_lower = input("Include lowercase letters? (y/n): ").lower() == 'y'
    include_digits = input("Include digits? (y/n): ").lower() == 'y'
    include_special = input("Include special characters? (y/n): ").lower() == 'y'
    
    # Ask user if they want to exclude any characters
    exclude_chars = input("Enter any characters to exclude (optional): ")
    
    # Ask user if they want to include any specific characters
    include_chars = input("Enter any characters to include (optional): ")

    # Generate and display the password
    generated_password = generate_password(length, include_upper, include_lower, include_digits, include_special, exclude_chars, include_chars)
    print(f"Generated Password: {generated_password}")
    
    # Evaluate the password strength
    strength = evaluate_password_strength(generated_password)
    print(f"Password Strength: {strength}")
    
    # Offer a stronger password if the generated one is weak
    if strength == "weak":
        print("\nThe generated password is weak. Here is a stronger random password:")
        stronger_password = generate_password(12, True, True, True, True)  # Generate a stronger default password
        print(f"Stronger Password: {stronger_password}")

# Run the password generator function
if __name__ == "__main__":
    password_generator()
